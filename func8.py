# Сортировка по ключу с лямбда функцией
meals = ['бублик', 'бургер', 'пицца', 'шашлык', 'овощи', 'фрукты', 'конфеты', 'гречка']
participants = [
    ('Алиса', 27, 18),
    ('Борис', 19, 39),
    ('Владимир', 38, 63),
    ('Александр', 19, 95),
    ('Зинаида', 32, 61)
]

# классическая лексикографическая сортировка
# meals.sort()

# Сортировка по убыванию
meals.sort(reverse=True)

# по количеству букв
meals.sort(key=lambda x: len(x))

# по последней букве каждого слова
meals.sort(key=lambda x: x[-1])  # [-1] - первый с конца

print(meals)

########################################
# Сортировка сложного списка в
# лексикографическом порядке по именам
# participants.sort()

# Сортировка по оценкам по убыванию
# participants.sort(key=lambda x: x[-1], reverse=True)

# Сортировка по возрасту, а потом уже по оценкам по возрастанию
participants.sort(key=lambda x: (x[1], x[2]), reverse=False)

print(participants)

# Sorted - принимает iterable object, возвращает отсортированный список
# reverse и key используются аналогично
# Пример: новый список, отсортированный по убыванию
sorted_meals = sorted(meals, reverse=True)
print(sorted_meals)
